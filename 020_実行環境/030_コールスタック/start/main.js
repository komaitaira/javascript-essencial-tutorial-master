function a() {
}
function b() {
    a();
}
function c() {
    b();
}
c();

// 並行処理 複数の処理を同時に進行させること
// 逐次処理 複数の処理を一つずつ完結させながら順番に進めること
// 基本的にユーザーには待ち時間を与えたくない。待ち時間を作らないためには、複数の処理を同時に進めていくことが効率的である。これが非同期処理につながっていく。※処理によっては、ある処理の終了が次に処理の開始の条件となっていることなどもあるため、全て並行処理がいいというわけでもない。

// グローバルコンテキスト

// 実行中のコンテキスト内の変数・関数（JavaScriptファイル内直下の実行環境）
// グローバルオブジェクト
// this
// 関数コンテキスト

// 実行中のコンテキスト内の変数・関数（関数宣言内{}に記述されたコードの実行環境）
// arguments
// super
// this
// 外部変数
// コールスタック
// 　実行中のコードが辿ってきたコードの積み重ねのこと。
// JavaScriptエンジンはコールスタックという仕組みを通してJavaScriptがどのように実行されてきたかを追跡している。
// コールスタックは「後入れ先出し」LIFO(Last In First Out)である。

// タスクキュー
// 　実行待ちの非同期処理の行列のこと。キューの仕組みは「先入れ先出し」FIFO(First In First Out)である。
// ①コールスタックにグローバルコンテキストが積まれる。
// ②コールスタックに関数コンテキストが積まれる。
// ③関数コンテキスト内の非同期処理がタスクキューに追加される。
// ④コールスタックが全て処理されて空きが出来たのをイベントループが検知して、それをタスクキューに通知する。
// ⑤イベントループからの通知をもって、先にタスクキューに入れられたタスクがコールスタックに積まれていき、順々に処理される。